Plugins can provide compile time classes that should not be bundled with runtime classes (i.e, addon sources). Sources and resources placed under @$basedir/src/cli@ will be automatically compiled and packaged into a jar whose name matches @griffon-${plugin.name}-cli-${plugin.version}.jar@. A typical use case for these type of classes is a custom AST transformation that should be run during compile time but not at runtime.

Even though the packaging will be performed automatically you must make sure that the cli.jar is available to the DependencyManager. This is done by adding a snippet to @$basedir/scripts/_Events.groovy@ like the following one taken from the [Quartz plugin|http://griffon.codehaus.org/Quartz+Plugin]

{code}
def eventClosure1 = binding.variables.containsKey('eventSetClasspath') ? eventSetClasspath : {cl->}
eventSetClasspath = { cl ->
    eventClosure1(cl)
    if(compilingPlugin('quartz')) return
    griffonSettings.dependencyManager.flatDirResolver(
        name: 'griffon-quartz-plugin', dirs: "${quartzPluginDir}/addon")
    // needed for compile/runtime deps
    griffonSettings.dependencyManager.addPluginDependency('quartz', [
        conf: 'compile',
        name: 'griffon-quartz-addon',
        group: 'org.codehaus.griffon.plugins',
        version: quartzPluginVersion
    ])
    // needed for build deps only
    griffonSettings.dependencyManager.addPluginDependency('quartz', [
        conf: 'build',
        name: 'griffon-quartz-cli',
        group: 'org.codehaus.griffon.plugins',
        version: quartzPluginVersion
    ])
}
{code}

Substitute all occurrences of @quartz@ with the name of your plugin.
