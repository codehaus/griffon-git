/*
 * Copyright 2010-2011 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.tools.ant.filters.ReplaceTokens

task prepareIzpack(type: Copy) {
    dependsOn { [distBinary] }

    destinationDir = "$buildDir/assemble/izpack" as File
    from('installer/izpack/resources') {
        into 'resources'
        filter(ReplaceTokens, tokens: ['griffon.version': version])
    }
    from("$buildDir/distributions/binary") {
        into 'binary'
    }
    into('source'){
        with distSourceSpec
    }
}

task izpack(dependsOn: [prepareIzpack]) {
    description = "Creates an IzPack based installer for both binary and source distributions."
    inputs.dir("$buildDir/assemble/izpack" as File)
    outputs.files "$buildDir/distributions/griffon-${version}-installer.jar"

    doLast {
        ant.taskdef(name: 'izpack',
                    classpath: fileTree(dir: file('installer/izpack/lib'), includes: ['*.jar']).asPath,
                    classname: 'com.izforge.izpack.ant.IzPackTask')
    
        ant.property(name: 'app.group',   value: 'Griffon')
        ant.property(name: 'app.name',    value: 'griffon')
        ant.property(name: 'app.title',   value: 'Griffon')
        ant.property(name: 'app.version', value: version)
        ant.property(name: 'app.subpath', value: "Griffon-$version")
    
        ant.chmod(dir: "$buildDir/assemble/izpack/binary/bin", excludes: '*.bat', perm: 'ugo+x')
        ant.izpack(basedir: "$buildDir/assemble/izpack",
                   output: "$buildDir/distributions/griffon-${version}-installer.jar",
                   compression: 'deflate',
                   compressionlevel: '9') {
            config(file('installer/izpack/installer.xml').text)
        }
    }
}

task rpm(dependsOn: [distBinary]) {
    description = "Creates an RPM package from the binary distribution."
    inputs.dir("$buildDir/assemble/rpm" as File)
    outputs.files "$buildDir/distributions/griffon-${version.replace('-','_')}-1.noarch.rpm"

    doLast {
        def rpmDir = "$buildDir/assemble/rpm" as File
    
        mkdir("${rpmDir}/BUILD")
        mkdir("${rpmDir}/SOURCES")
        mkdir("${rpmDir}/SPECS")
        mkdir("${rpmDir}/SRPMS")
        mkdir("${rpmDir}/RPMS/noarch")
    
        copy {
            from 'installer/rpm'
            into "$rpmDir/SPECS"
            include '*.spec'
            filter(ReplaceTokens, tokens: ['griffon.version': version, 'griffon.version.rpm': version.replace('-','_')])
        }
    
        copy {
            from("$buildDir/distributions/binary")
            into "$rpmDir/griffon-$version"
        }
        ant.chmod(dir: "$rpmDir/griffon-${version}/bin", excludes: '*.bat', perm: 'ugo+x')
    
        ant.zip(
            destfile: "$rpmDir/SOURCES/griffon-${version}-bin.zip",
            basedir: rpmDir,
            includes: "griffon-${version}/**/*")
    
        ant.rpm(specFile: 'griffon.spec',
                topDir: rpmDir,
                cleanBuildDir: false,
                failOnError: true)
        copy {
            from "$rpmDir/RPMS/noarch/"
            into "$buildDir/distributions"
            include '*.rpm'
        }
    }
}

task dmg(dependsOn: [distBinary]) {
    description = "Creates a DMG package from the binary distribution."
    inputs.dir "$buildDir/distributions/binary"
    outputs.files "$buildDir/distributions/griffon-${version}-bin.dmg"

    def destinationDir = "$buildDir/distributions" as File
    def dmgDir = "$buildDir/assemble/dmg" as File

    doLast {
        copy {
            from("$buildDir/distributions/binary")
            into "$dmgDir/griffon-${version}"
        }
        ant.chmod(dir: "$dmgDir/griffon-${version}/bin", excludes: '*.bat', perm: 'ugo+x')

        copy {
            from('installer/dmg/resources')
            into dmgDir
            filter(ReplaceTokens, tokens: ['griffon.version': version])
        }

        def assemblerDir = project.file('installer/dmg/assembler')
        def output = "$buildDir/distributions/griffon-${version}-bin.dmg"
        ant.exec(executable: "$assemblerDir/create-dmg") {
            arg(line: "--window-size 380 260 "+
                      "--background ${assemblerDir}/background.png "+
                      "--icon-size 128 "+
                      "--volname \"Griffon $version\" "+
                      "$output $dmgDir")
        }
    }
}

task deb(dependsOn: [distBinary]) {
    description = "Creates a Debian package from the binary distribution."
    inputs.dir "$buildDir/distributions/binary"
    outputs.file "$buildDir/distributions/griffon-${version}-1_all.deb"

    doLast {
        File debSrcDir = project.file('installer/deb')
        File debDir = "$buildDir/assemble/deb" as File
        File destinationDir = new File(debDir.absolutePath, 'dist')
    
        ant.taskdef(resource: 'ant_deb_task.properties',
                    classpath: fileTree(dir: debSrcDir, includes: ['*.jar']).asPath)
    
        copy {
            from debSrcDir
            into debDir
            filter(ReplaceTokens, tokens: ['griffon.version': version])
        }
        copy {
            from "$buildDir/distributions/binary"
            into destinationDir
            exclude '**/*.bat'
        }
        ant.chmod(dir: "${destinationDir}/bin", perm: 'ugo+x')
    
        ant.deb(todir: "$buildDir/distributions",
                'package': 'griffon',
                section: 'contrib/devel',
                postinst: "$debDir/postinst",
                prerm: "$debDir/prerm") {
            version(upstream: version)
            maintainer(name: 'Griffon Team',
                       email: 'dev@griffon.codehaus.org')
            description(synopsis: 'Grails-like framework for desktop Java applications', '''
Griffon is a Grails inspired application framework for developing desktop applications in Groovy
Home page: http://griffon.codehaus.org/
''')
            tarfileset(dir: destinationDir, prefix: "./usr/share/griffon-${version}")
            tarfileset(dir: "$destinationDir/bin", prefix: "./usr/share/griffon-${version}/bin", filemode: '755')
        }
    }
}
