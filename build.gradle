/*
 * Copyright 2010-2011 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'groovy'

sourceCompatibility = '1.5'
targetCompatibility = '1.5'
archivesBaseName = 'griffon'
group = 'org.codehaus.griffon'

// we'll build jars our own way
jar.enabled = false

configurations {
    rt
    cli { extendsFrom rt }
    scripts { extendsFrom cli }
    resources
    rt.transitive = false
    cli.transitive = false
    scripts.transitive = false
    swingxFiles
	wrapper
    intTestCompile { extendsFrom testCompile }
    intTestRuntime { extendsFrom intTestCompile, testRuntime }
    lombok
}

repositories {
    mavenCentral()
    mavenRepo name: 'SpringSource', urls: 'http://repository.springsource.com/maven/bundles/release'
    mavenRepo name: 'Lombok', urls: 'http://projectlombok.org/mavenrepo'
    flatDir(dirs: file('lib/test'))
    flatDir(dirs: file('lib/wrapper'))
}

dependencies {
    lib = "$projectDir/lib" as File
    groovy "org.codehaus.groovy:groovy-all:$groovyVersion"
    rt  "org.codehaus.groovy:groovy-all:$groovyVersion",
        "log4j:log4j:1.2.16",
        "org.slf4j:slf4j-log4j12:$slf4jVersion",
        "org.slf4j:slf4j-api:$slf4jVersion",
        "org.slf4j:jcl-over-slf4j:$slf4jVersion",
        "org.slf4j:jul-to-slf4j:$slf4jVersion"
    cli "org.codehaus.gpars:gpars:0.9",
        "org.coconut.forkjoin:jsr166y:070108",
        "junit:junit:4.8.1",
        "asm:asm:3.2",
        "org.tmatesoft.svnkit:svnkit:1.3.1",
        "org.apache.ant:ant:$antVersion",
        "org.apache.ant:ant-antlr:$antVersion",
        "org.apache.ant:ant-launcher:$antVersion",
        "org.apache.ant:ant-junit:$antVersion",
        "org.apache.ant:ant-nodeps:$antVersion",
        "jline:jline:0.9.94",
        "org.fusesource.jansi:jansi:1.4",
        "commons-cli:commons-cli:1.2",
        "commons-io:commons-io:1.4",
        "commons-lang:commons-lang:2.5",
        "org.springframework:org.springframework.core:$springVersion",
        "org.springframework:org.springframework.aop:$springVersion",
        "org.springframework:org.springframework.aspects:$springVersion",
        "org.springframework:org.springframework.asm:$springVersion",
        "org.springframework:org.springframework.beans:$springVersion",
        "org.springframework:org.springframework.context:$springVersion",
        "org.springframework:org.springframework.context.support:$springVersion",
        "org.springframework:org.springframework.expression:$springVersion",
        "org.springframework:org.springframework.instrument:$springVersion",
        "org.xhtmlrenderer:core-renderer:R8pre2",
        "com.lowagie:itext:2.0.8",
        "radeox:radeox:1.0-b2",
        "org.grails:grails-docs:1.3.6",
        "org.apache.ivy:ivy:2.2.0",
        "org.codehaus.gant:gant_groovy1.7:1.9.3"

    swingxFiles ":swing-worker",
				":swingx:0.9.3",
				":swingxbuilder:0.1.6-SNAPSHOT"

	wrapper ":gradle-wrapper"
    lombok "org.projectlombok:lombok:0.9.3"
    lombok files("${System.getenv('JAVA_HOME')}/lib/tools.jar")
}

sourceSets {
    rt {
        compileClasspath = configurations.rt
        java.srcDirs = []
        groovy.srcDirs = ['src/main/rt']
        classesDir = "$buildDir/classes/rt" as File
        resources.srcDirs = ['src/resources/rt']
    }
    cli {
        compileClasspath = sourceSets.rt.classes + configurations.cli
        java.srcDirs = []
        groovy.srcDirs = ['src/main/cli']
        classesDir = "$buildDir/classes/cli" as File
        resources.srcDirs = ['src/resources/cli']
    }
    scripts {
        compileClasspath = sourceSets.rt.classes + sourceSets.cli.classes + configurations.scripts
        java.srcDirs = []
        groovy.srcDirs = ['src/main/scripts']
        classesDir = "$buildDir/classes/scripts" as File
    }
    wrapper {
        compileClasspath = configurations.wrapper
        java.srcDirs = ['src/wrapper/java']
        classesDir = "$buildDir/classes/wrapper" as File
    }
    test {
        compileClasspath = sourceSets.rt.classes + sourceSets.cli.classes + configurations.cli + configurations.swingxFiles
        runtimeClasspath = classes + sourceSets.rt.classes + sourceSets.cli.classes + configurations.cli + configurations.swingxFiles
        java.srcDirs = []
        groovy.srcDirs = ['src/test/rt', 'src/test/cli']
    }
    intTest {
        compileClasspath = sourceSets.rt.classes + sourceSets.cli.classes + sourceSets.scripts.classes + configurations.cli + configurations.scripts
        runtimeClasspath = classes + sourceSets.rt.classes + sourceSets.cli.classes + sourceSets.scripts.classes + configurations.cli + configurations.scripts + files(fileTree("$buildDir/libs/griffon-resources-${version}.jar"))
        java.srcDirs = []
        groovy.srcDirs = ['src/test/integration']
    }
}

task allClasses(dependsOn: [rtClasses, cliClasses, scriptsClasses]) {
    description = "Compiles all rt, cli and script classes."
}

cliClasses.doLast {
    def buildProps = new File("$buildDir/classes/cli/build.properties")
    buildProps.text = """        griffon.version=$version
        groovy.version=$groovyVersion
        ant.version=$antVersion
        slf4j.version=$slf4jVersion
        spring.version=$springVersion""".stripIndent(8)
}

configure(tasks.withType(GroovyCompile).all) {
    groovyOptions.fork(memoryInitialSize: '128M', memoryMaximumSize: '1G')
    groovyOptions.encoding = "UTF-8"
}

configure(tasks.withType(Compile).all) {
    options.deprecation = true
    options.debug = true
}

apply {
    from 'gradle/wrapper.gradle'
    from 'gradle/assemble.gradle'
    from 'gradle/docs.gradle'
    from 'gradle/installer.gradle'
    from 'gradle/maven.gradle'
    from 'gradle/coverage.gradle'
    from 'gradle/codeQuality.gradle'
}

task intTest(type: Test) {
    dependsOn jarResources
    testClassesDir = sourceSets.intTest.classesDir
    classpath = sourceSets.intTest.runtimeClasspath
    testSrcDirs = sourceSets.intTest.groovy.srcDirs as List
}

task allTests(dependsOn: [test, intTest]) {
    description = "Runs all unit and integration tests."
}

task fullDist(dependsOn: [zipGuide, zipBinary, zipSource, tarBinary, tarSource, izpack, deb]) {
    description = "Assembles all packages."
}

task bambooStage1(dependsOn: [clean, test]) {
    description = "Makes a full test run and assembles all packages."
}

task bambooStage2(dependsOn: [bambooStage1, fullDist, rpm]) {
    description = "Makes a full test run and assembles all packages."
}

task wrapper(type: Wrapper) {
    gradleVersion = '0.9.2'
    jarFile = 'gradle/wrapper/gradle-wrapper.jar'
}
